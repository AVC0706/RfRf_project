events { }

http {

  map $http_upgrade $connection_upgrade {
      default upgrade;
      ''      close;
    }
  
  # redirect www -> non-www 

  server {
    server_name www.rfrf-dev.ml;
    return 301 $scheme://rfrf-dev.ml$request_uri;
  }
  
  # redirect http -> https

  server {
    listen 80;
    server_name rfrf-dev.ml;
    return 301 https://rfrf-dev.ml$request_uri;
         }

  # read the ssl certificate / key when listening on https
  
   server {
    listen 443 ssl;
    server_name rfrf-dev.ml;
    
    ssl_certificate /etc/nginx/certs/fullchain.pem;
    ssl_certificate_key /etc/nginx/certs/privkey.pem;
    
    access_log /var/log/nginx/data-access.log combined;

    # serve the static files 
    
    location / {
      root /usr/share/nginx/html;
      }

    # fetch data from proxied server when /api is called
    
    # location /api {
    #    proxy_pass http://backend:5000/api;
    #    proxy_set_header X-Real-IP  $remote_addr;
    #    proxy_set_header X-Forwarded-For $remote_addr;
    #    proxy_set_header Host $host;
    #    proxy_set_header X-Forwarded-Proto $scheme;
    #    proxy_redirect http://backend:5000/api $scheme://$http_host/;
    #    proxy_http_version 1.1;
    #    proxy_set_header Upgrade $http_upgrade;
    #    proxy_set_header Connection $connection_upgrade;
    #    proxy_read_timeout 20d;
    #    proxy_buffering off;
    #    }

     location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
            expires 1M;
            access_log off;
            add_header 'Cache-Control' 'public';
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
        }
        location ~* \.(?:css|js)$ {
            try_files $uri =404;
            expires 1y;
            access_log off;
            add_header Cache-Control "public";
        }
        location ~ ^.+\..+$ {
            try_files $uri =404;
        }

   }
}